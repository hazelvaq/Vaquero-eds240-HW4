---
title: "HW3"
name: "Hazel Vaquero"
date: '`r format(Sys.time(), "%d %B, %Y")`'
format:
  html:
    embed-resources: true
---

### Objective

For HW#4 I plan to pursue option #2, creating an infographic. My overarching question is: Do geographic and environmental factors influence NYC street trees health status and issues? This question has changed from HW #1 as I had originally wanted to answer the public health benefits of trees. Finding data at a localized level where it would make sense to compare to tree density was difficult. Instead, I will work with The Department of Parks and Recreation 2015 NYC Street Tree Census.

The three sub-questions I will be answering are:

1.  What is the geographic distribution of dead trees in NYC?

2.  Variables: `status` which is either the tree is alive or dead. Then this will be plotted by `nta_name` which is the neighborhood name. I think it'll be interesting to highlight the oldest dead tree.

I was thinking something similar to Tanya Shapiro's Staten Island map: <https://www.tanyashapiro.com/?itemId=x9k97z69pf506coibemwlj5p89ojyk>

I'll highlight the oldest tree dead on the map.

2.  What is the current health status distribution of all trees?

-   Variables: `health` this is the health of the trees and it is divided into 4 categories ("Good","Fair", "Poor", and "Dead"). With the 4 categories, I will calculate the number of trees in each and plot it as a treemap. To then see how is the health status distributed across the 5 boroughs.

For the last question I am in between two:

What is the tree diameter distribution of dead trees in NYC? This would be looking at distribution I would create a set range of tree sizes: (0-50, 50-150,150-250,250+). Then this would be displayed as tree stumps with varying sizes depending on their frequency.

So it'll look something like this:

![](https://barproducts.com/cdn/shop/products/lazy-susan-wood-table-top-tree-rings-size-comparison_1_1_864x500.jpg?v=1572544045){width="370"}

What are the most common issues affecting street trees?

Variables:

`root_stone`: Presence of a root problem caused by paving stones

`root_grate`: Presence of a root problem caused by metal grates in tree bed `root_other`: Other root problems

`trunk_wire`: Presence of a trunk problem caused by wires or rope

`brch_light`: Presence of light or rope causing problem

`brch_shoe`: Presence of shoes causing problems

`brch_other`: Presence of other

The goal would be to determine the count of each variable and then plot it on a bar graph of how many counts it is for each.

##### Drawings of anticipated visuals

![](images/IMG_4357-01.jpg)

##### Questions

The challenges I encountered as I built my iterations was figuring out what I wanted to represent and show. I was originally interested in showing the tree species and their relationship to tree diameter. But there are over 120 tree species in the data set, all with varying growth rates so it would be too complicated and messy to display it in one graph. Another challenge was when working with the data I constantly had new ideas on what I wanted to explore. When I was developing the map of the distribution of dead trees across NYC, I became interested in identifying a neighborhood that has the highest number of dead trees to alive trees. Then could I potentially focus on the neighborhood and highlight the streets that have the highest ratios? Or I could just determine what specific street has the highest dead to alive street trees. And even expand on that I could look at the street with the highest dead/alive ratio across the 5 boroughs. I think I need to do more investigation on how I want to deal with representing the number of dead trees in a creative way.

![](images/IMG_4360.jpg)

The ggplot extensions I will be using so far are `geom_sf()` and `geom_bar()`. I am also planning on using `ggmap()` instead of `leaflet` for the map aspect. That is something I will be figuring out how to use using Tanya Shapiro's code on Staten Island linked above.

The feedback I'll need is what would be the best approach for displaying the dead trees. Should I try to figure out how to calculate the dead/alive per street for each borough or just look for the highest one? Then intuitively would I need a map of NYC for those who do not know what it looks like?

#### Mockup visualizations

```{r, include=FALSE}
# Import libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(here)
library(janitor)
library(sf)
library(jsonlite)
library(treemap)
library(ggrepel)
library(osmdata)
library(sf)
library(ggmap)
library(leaflet)

```

```{r, message=FALSE, warning=FALSE, results='hide'}
# Load in NYC street trees data
# Polygon
nyc_trees <- st_read("data/tree_data/geo_export_145e1dbe-8d16-4451-aa07-a8915754603a.shp") 

nyc_boundary <- st_read("data/nyc_boundary/geo_export_cba87a71-9b4b-45bc-9ca2-8cd5cf2eabdb.shp")

# Check CRS
#st_crs(nyc_trees) == st_crs(nyc_boundary)

nyc_trees <- nyc_trees %>% 
  mutate(across(starts_with("trnk")|
                       starts_with("brnch")|
                       starts_with("root"),
    ~ifelse(. =="No",0,1)))
                     
```

```{r, warning=FALSE, message=FALSE}
# First Visual ----

##################
# Dead trees count by street
trees_dead <- nyc_trees %>% 
  filter(status == "Dead" | status == "Stump") %>% 
  group_by(address, boroname) %>% 
  summarise(dead = n()) 

trees_dead_1 <- trees_dead %>% 
  filter(dead >= 10) %>% 
  st_drop_geometry()

# Alive trees count by street
trees_alive <- nyc_trees %>%
  filter(address == trees_dead_1$address) %>% 
  filter(status == "Alive") %>% 
  group_by(address) %>% 
  summarise(alive = n()) %>% 
  st_drop_geometry()


# join data
merge_tree <- merge(trees_dead_1, trees_alive, by = "address")



# --------------------------------------
# Dead trees count by block
trees_dead_b <- nyc_trees %>% 
  filter(status == "Dead" | status == "Stump") %>% 
  group_by(block_id, boroname) %>% 
  summarise(count = n()) 

### STREET WITH THE MOST DEAD TREES 750 DRAKE STREET

borough_dead <- nyc_trees %>% 
  filter(status == "Dead" | status == "Stump") %>% 
  group_by(nta_name, boroname) %>% 
  summarize(dead = n()) %>% 
  st_drop_geometry()

borough_alive <- nyc_trees %>% 
  filter(status == "Alive") %>% 
  group_by(nta_name, boroname) %>% 
  summarize(alive = n()) %>% 
  st_drop_geometry()


# BUSHWICK NORTH

merge_borough <- merge(borough_dead, borough_alive, by = "nta_name") %>% 
  select(-boroname.y)
  
a <- merge_borough %>% mutate(rats = dead/alive)


############

north_wi <- nyc_boundary %>% 
  filter(ntaname == "Bushwick North")

st_crs(north_wi) == st_crs(nyc_trees)

wi_dead<- nyc_trees %>% filter(nta_name == "Bushwick North",
                          status == "Dead" |
                            status == "Stump")
                          

ggplot()+
  geom_sf(data = north_wi) +
  geom_sf(data = wi_dead,
           size = 0.5, alpha = 1, color = "red") 




```

```{r}

d_tree <- nyc_trees %>% filter(nta_name == "Bushwick North",
                               status == "Dead") %>%
  select(address, nta_name, boroname, block_id, status) %>%
  group_by(address)

d1_tree <- nyc_trees %>% filter(nta_name == "Bushwick North",
                                      status == "Dead") %>% 
  select(address, nta_name, boroname, block_id,status) %>% 
  group_by(address) %>% 
  summarise(num = n())

leaflet() %>% 
  addTiles() %>% 
  setView(-73.90, 40.70, zoom = 12.5) %>%
  addPolygons(data = north_wi) %>% 
  addProviderTiles("CartoDB.Positron") %>% 
  addMarkers(data = d_tree)


bronx <- nyc_trees %>% filter(address == "750 DRAKE STREET")

queens <- nyc_trees %>% filter(address == "106 CROSS BAY BOULEVARD")

         
leaflet() %>% 
  addTiles() %>% 
  setView(-73.90, 40.70, zoom = 12.5) %>% 
  addMarkers(data =  ab)




```

```{r}
# import nyc streetss?

street <- st_read("data/streets/geo_export_91484df4-44a2-4d46-84d2-cd2a2c7aa183.shp")

# Intersection of streets in that neighborhood
#north_wi
#streets

street <- st_transform(street, st_crs(north_wi))

st_is_valid(street)
st_is_valid(north_wi)

# Streets of North Williamsburg to be used to find frequency of trees
wi_street <- st_intersection(street, north_wi) %>% 
  st_union()

ggplot(data = north_wi) +
  geom_sf() +
  geom_sf(data = wi_street) +
  geom_sf(data = wi_dead, color = "red") +
  theme_void()

```

```{r}
osm_st <- st_read("data/osm_nyc/gis_osm_natural_free_1.shp")


api <- ""
register_google(api)



NYCMAP <- get_map("Williamsburg New York", zoom = 15)
ggmap(NYCMAP) +
  geom_sf()
```


```{r}
## Load in Highways and roads in Bushwick North ----
bush_roads_raw <- 
  st_bbox(north_wi) %>%
  opq() %>%
  add_osm_feature("highway") %>%
  osmdata_sf()


bush_outline <- 
  north_wi %>%
  st_simplify() %>%
  st_union() %>%
  st_buffer(dist = 0.001)


bush_roads <- 
  bush_roads_raw$osm_lines %>%
  st_transform(st_crs(north_wi)) %>%
  st_crop(st_bbox(north_wi)) %>% 
  st_transform(3488) ## transform to meters

# CRS transforms ----
bush_roads <- st_transform(bush_roads, crs = st_crs(north_wi))
bush_roads_buffer <- st_transform(bush_roads_buffer, crs = st_crs(north_wi))
wi_dead <- st_transform(wi_dead, crs = st_crs(north_wi))

bush_roads_buffer <- 
  bush_roads %>% 
  st_buffer(dist = 20, endCapStyle = "FLAT")


sf_roads_trees <- bush_roads %>% 
  mutate(
    length = as.numeric(st_length(.)),
    tree_count = lengths(st_intersects(bush_roads_buffer, wi_dead))
  ) 

# Clip frequency of trees to Bushwick North
bbbb <- st_intersection(north_wi, sf_roads_trees)


# Zero streets
zero_streets <- bbbb %>% 
  filter(tree_count == 0)

# Count of trees on streets
tree_streets <- bbbb %>% 
  filter(tree_count != 0)


# Plotting map ----
ggplot() +
  geom_sf(data = north_wi, lwd = 0.8, color = "black", fill = "grey90")+
  geom_sf(data = zero_streets,
          color = "#4CAF50",
          lwd = 0.5,
          alpha = 0.5) +
  geom_sf(data = tree_streets,
          aes(color = tree_count),
          lwd = 1) +
  scale_color_gradient(low = "#4CAF50",high = "#8B4513", 
                       na.value = NA,
                       name = "Dead Trees Frequency") +
  theme_void()
  
```



```{r}
# Second visual
# Tree rings

tree_rings <- nyc_trees %>% 
  filter(nta_name == "Bushwick North",
         status != "Alive")


summary(tree_rings$tree_dbh)

# 0-2
# 2 -4
# 4 - 18

tree_1 <- tree_rings %>% 
  filter(tree_dbh < 2) %>% 
  summarize(count = n()) %>% 
  mutate(range = "0-2")

tree_2 <- tree_rings %>% 
  filter(tree_dbh >= 2 & tree_dbh <4) %>% 
  summarize(count = n()) %>% 
  mutate(range = "2-4")

tree_3 <- tree_rings %>% 
  filter(tree_dbh >= 4 & tree_dbh <= 18)%>% 
  summarize(count = n()) %>% 
  mutate(range = "4-18") 


# Need to fix this
cut(tree_rings$tree_dbh, 
                       breaks = c(-Inf, quantile(tree_rings$tree_dbh, c(0.25, 0.5, 0.75)), Inf),
                       labels = c("0-1.99", "2-3.99", "4-18"),
                       include.lowest = TRUE)

```




```{r, warning=FALSE, message=FALSE}
# Second Visual ----
# Treemap
bstatus <- nyc_trees %>% 
  select(boroname, health) %>% 
  group_by(health,boroname) %>% 
  summarise(count = n()) %>% 
  st_drop_geometry()

bstatus$health[16:20] <- "Dead"


treemap(bstatus,
            index= c("boroname","health"),
            vSize="count",
            type="index",
            vColor = "count.prev",
        fontsize.labels = c(8,7.5),
        labels = FALSE,
        bg.labels = 0,
        border.col = "white",
        border.lwds = 1.5,
        fontcolor.labels = "white",
        align.labels = list(c("center","center"),c("left","top")),
        force.print.labels = TRUE,
        palette = "Set1",
        title = "NYC Street Tree Health Status",
        fontfamily.title = "sans"
        ) 



```
